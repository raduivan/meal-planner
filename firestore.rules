rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ---------- Helpers ----------
    function isSignedIn() { return request.auth != null; }
    function isOwner()    { return isSignedIn() && resource.data.ownerUid == request.auth.uid; }
    function createsOwned(){ return isSignedIn() && request.resource.data.ownerUid == request.auth.uid; }

    // Basic numeric checks
    function isNonNeg(n) { return n is number && n >= 0; }
    function isPos(n)    { return n is number && n > 0;  }

    // Validate recipe doc (keep lenient; we only check core fields used by planner UI)
    function validRecipe(d) {
      return d.name is string
        && ( !('caloriesPer100' in d) || isNonNeg(d.caloriesPer100) )
        && ( !('proteinPer100'  in d) || isNonNeg(d.proteinPer100)  )
        && ( !('carbsPer100'    in d) || isNonNeg(d.carbsPer100)    )
        && ( !('fatPer100'      in d) || isNonNeg(d.fatPer100)      );
      // Note: extra fields like fromIngredients, totalGrams, ingredients[] are allowed.
    }

    // Validate ingredient doc (per 100 g)
    function validIngredient(d) {
      return d.name is string
        && isNonNeg(d.caloriesPer100)
        && isNonNeg(d.proteinPer100)
        && isNonNeg(d.carbsPer100)
        && isNonNeg(d.fatPer100);
    }

    // Validate meal doc (denormalized per100 snapshot + grams)
    function validMeal(d) {
      return d.mealType is string
        && d.recipeId is string
        && d.recipeName is string
        && isPos(d.grams)
        && d.per100 is map
        && ( !('kcal' in d.per100) || isNonNeg(d.per100.kcal) )
        && ( !('p'    in d.per100) || isNonNeg(d.per100.p)    )
        && ( !('c'    in d.per100) || isNonNeg(d.per100.c)    )
        && ( !('f'    in d.per100) || isNonNeg(d.per100.f)    );
    }

    // ---------- Ingredients (public read, owned writes) ----------
    match /ingredients/{id} {
      allow read: if true;
      allow create: if createsOwned() && validIngredient(request.resource.data);
      allow update: if isOwner()
                    && request.resource.data.ownerUid == resource.data.ownerUid
                    && validIngredient(request.resource.data);
      allow delete: if isOwner();
    }

    // ---------- Recipes (must be from ingredients) ----------
function validRecipeFromIng(d) {
  return d.fromIngredients == true
    && d.name is string
    && d.totalGrams is number && d.totalGrams > 0
    && ( !('caloriesPer100' in d) || isNonNeg(d.caloriesPer100) )
    && ( !('proteinPer100'  in d) || isNonNeg(d.proteinPer100)  )
    && ( !('carbsPer100'    in d) || isNonNeg(d.carbsPer100)    )
    && ( !('fatPer100'      in d) || isNonNeg(d.fatPer100)      )
    && d.ingredients is list
    && d.ingredients.size() > 0
    && d.ingredients.hasOnly([
         'ingredientId','name','grams','per100'
       ])
    // each ingredient row
    && d.ingredients.every(it =>
         (it.name is string || it.ingredientId is string)
         && isPos(it.grams)
         && it.per100 is map
         && ( !('kcal' in it.per100) || isNonNeg(it.per100.kcal) )
         && ( !('p'    in it.per100) || isNonNeg(it.per100.p)    )
         && ( !('c'    in it.per100) || isNonNeg(it.per100.c)    )
         && ( !('f'    in it.per100) || isNonNeg(it.per100.f)    )
       );
}

match /recipes/{id} {
  allow read: if true;

  // Create must be owned + ingredients-based shape
  allow create: if createsOwned() && validRecipeFromIng(request.resource.data);

  // Update: owner only, keep owner, still ingredients-based
  allow update: if isOwner()
                && request.resource.data.ownerUid == resource.data.ownerUid
                && validRecipeFromIng(request.resource.data);

  allow delete: if isOwner();
}


    // ---------- Per-user plans ----------
    // plans/{uid}/days/{yyyy-mm-dd}/meals/{mealId}
    match /plans/{uid} {
      allow read, write: if isSignedIn() && request.auth.uid == uid;

      match /days/{date} {
        allow read, write: if isSignedIn() && request.auth.uid == uid;

        match /meals/{mealId} {
          allow create, update: if isSignedIn()
                                && request.auth.uid == uid
                                && validMeal(request.resource.data);
          allow read, delete: if isSignedIn() && request.auth.uid == uid;
        }
      }
    }

    // ---------- Default deny ----------
    match /{document=**} {
      allow read, write: if false;
    }
  }
}